// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WarehouseManagement.Infrastructure.Data;

#nullable disable

namespace WarehouseManagement.Infrastructure.Migrations
{
    [DbContext(typeof(WarehouseDbContext))]
    partial class WarehouseDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WarehouseManagement.Domain.Aggregates.Balance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UnitOfMeasureId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId", "UnitOfMeasureId")
                        .IsUnique();

                    b.ToTable("Balances");
                });

            modelBuilder.Entity("WarehouseManagement.Domain.Aggregates.NamedAggregates.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("WarehouseManagement.Domain.Aggregates.NamedAggregates.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("WarehouseManagement.Domain.Aggregates.NamedAggregates.UnitOfMeasure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("UnitsOfMeasure");
                });

            modelBuilder.Entity("WarehouseManagement.Domain.Aggregates.ReceiptAggregate.ReceiptDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("ReceiptDocuments");
                });

            modelBuilder.Entity("WarehouseManagement.Domain.Aggregates.ReceiptAggregate.ReceiptResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReceiptDocumentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UnitOfMeasureId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReceiptDocumentId");

                    b.ToTable("ReceiptResources");
                });

            modelBuilder.Entity("WarehouseManagement.Domain.Aggregates.ShipmentAggregate.ShipmentDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsSigned")
                        .HasColumnType("boolean");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("ShipmentDocuments");
                });

            modelBuilder.Entity("WarehouseManagement.Domain.Aggregates.ShipmentAggregate.ShipmentResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ShipmentDocumentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UnitOfMeasureId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ShipmentDocumentId");

                    b.ToTable("ShipmentResources");
                });

            modelBuilder.Entity("WarehouseManagement.Domain.Aggregates.Balance", b =>
                {
                    b.OwnsOne("WarehouseManagement.Domain.ValueObjects.Quantity", "Quantity", b1 =>
                        {
                            b1.Property<Guid>("BalanceId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,6)")
                                .HasColumnName("Quantity");

                            b1.HasKey("BalanceId");

                            b1.ToTable("Balances");

                            b1.WithOwner()
                                .HasForeignKey("BalanceId");
                        });

                    b.Navigation("Quantity")
                        .IsRequired();
                });

            modelBuilder.Entity("WarehouseManagement.Domain.Aggregates.NamedAggregates.Client", b =>
                {
                    b.OwnsOne("WarehouseManagement.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("ClientId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("Address");

                            b1.HasKey("ClientId");

                            b1.ToTable("Clients");

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("WarehouseManagement.Domain.Aggregates.ReceiptAggregate.ReceiptResource", b =>
                {
                    b.HasOne("WarehouseManagement.Domain.Aggregates.ReceiptAggregate.ReceiptDocument", null)
                        .WithMany("ReceiptResources")
                        .HasForeignKey("ReceiptDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("WarehouseManagement.Domain.ValueObjects.Quantity", "Quantity", b1 =>
                        {
                            b1.Property<Guid>("ReceiptResourceId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,6)")
                                .HasColumnName("Quantity");

                            b1.HasKey("ReceiptResourceId");

                            b1.ToTable("ReceiptResources");

                            b1.WithOwner()
                                .HasForeignKey("ReceiptResourceId");
                        });

                    b.Navigation("Quantity")
                        .IsRequired();
                });

            modelBuilder.Entity("WarehouseManagement.Domain.Aggregates.ShipmentAggregate.ShipmentResource", b =>
                {
                    b.HasOne("WarehouseManagement.Domain.Aggregates.ShipmentAggregate.ShipmentDocument", null)
                        .WithMany("ShipmentResources")
                        .HasForeignKey("ShipmentDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("WarehouseManagement.Domain.ValueObjects.Quantity", "Quantity", b1 =>
                        {
                            b1.Property<Guid>("ShipmentResourceId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,6)")
                                .HasColumnName("Quantity");

                            b1.HasKey("ShipmentResourceId");

                            b1.ToTable("ShipmentResources");

                            b1.WithOwner()
                                .HasForeignKey("ShipmentResourceId");
                        });

                    b.Navigation("Quantity")
                        .IsRequired();
                });

            modelBuilder.Entity("WarehouseManagement.Domain.Aggregates.ReceiptAggregate.ReceiptDocument", b =>
                {
                    b.Navigation("ReceiptResources");
                });

            modelBuilder.Entity("WarehouseManagement.Domain.Aggregates.ShipmentAggregate.ShipmentDocument", b =>
                {
                    b.Navigation("ShipmentResources");
                });
#pragma warning restore 612, 618
        }
    }
}
